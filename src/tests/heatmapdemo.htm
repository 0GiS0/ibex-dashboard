<html><head>
	<title>Leaflet Layers Control Example</title>
	<meta charset="utf-8">

	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css">
    <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-label/v0.2.1/leaflet.label.css' rel='stylesheet' />
    
	<style>
		#map {
			width: 100%;
			height: 100%;
		}

		.info {
			padding: 6px 8px;
			font: 21px/44px Arial, Helvetica, sans-serif;
			background: white;
			background: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
		}
		.info h4 {
			margin: 0 0 5px;
			color: #777;
		}

		.legend {
			text-align: left;
			line-height: 18px;
			color: #555;
		}
		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
			opacity: 0.7;
		}
		.my-label {
			position: absolute;
			width:200px;
			font-size:20px;
		}
	</style>
</head>
<body class="">
	<div id='map'></div>

	<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/2.0.2/turf.min.js"></script>
	<script type="text/javascript" src="/src/tests/libyanAreas.js"></script>
	<script type="text/javascript" src="/osmShapes/OSMBorderDescedents.js"></script>
    <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-label/v0.2.1/leaflet.label.js'></script>
	<script type="text/javascript">

		var map = L.map('map').setView([20.1463919, 2.2705778], 4);

		L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpandmbXliNDBjZWd2M2x6bDk3c2ZtOTkifQ._QA7i5Mpkd_m30IGElHziw', {
			maxZoom: 18,
			attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
				'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
				'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
			id: 'mapbox.light'
		}).addTo(map);


		// control that shows state info on hover
		var info = L.control();

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};

		info.update = function (props) {
			this._div.innerHTML = '<h4>Libyan Displacement Sentiment Analysis(across twitter and facebook)</h4>' +  (props ?
				'<b>' + props['wof:name'] + '</b><br /> A magnitude score of ' + props['magnitude'] + ''
				: 'Hover over a region');
		};

		info.addTo(map);


		// get color depending on population density value
		function getColor(d) {
			return d > 1000 ? '#800026' :
			       d > 500  ? '#BD0026' :
			       d > 200  ? '#E31A1C' :
			       d > 100  ? '#FC4E2A' :
			       d > 50   ? '#FD8D3C' :
			       d > 20   ? '#FEB24C' :
			       d > 10   ? '#FED976' :
			                  '#FFEDA0';
		}

		function style(feature) {
			return {
				weight: 2,
				opacity: 1,
				color: 'white',
				dashArray: '3',
				fillOpacity: 0.7,
				fillColor: getColor(feature.properties['magnitude'])
			};
		}

		function highlightFeature(e) {
			var layer = e.target;

			layer.setStyle({
				weight: 5,
				color: '#666',
				dashArray: '',
				fillOpacity: 0.7
			});

			if (!L.Browser.ie && !L.Browser.opera) {
				layer.bringToFront();
			}

			info.update(layer.feature.properties);
		}

		var geojson;

		function resetHighlight(e) {
			geojson.resetStyle(e.target);
			info.update();
		}

		function zoomToFeature(e) {
			map.fitBounds(e.target.getBounds());
		}

		function onEachFeature(feature, layer) {
			layer.on({
				mouseover: highlightFeature,
				mouseout: resetHighlight,
				click: zoomToFeature
			});
            
           // layer.bindLabel(feature.properties['name'] || feature.properties['wof:name'], {noHide: true, className: "my-label", offset: [0, 0] }).addTo(map);
			layer.bindPopup(feature.properties['name'] || feature.properties['wof:name'], {noHide: true, className: "my-label", offset: [0, 0] });
		}
		
		function values(o) { return Object.keys(o).map(k=> o[k]) }
		
		function punchHolesForDescendantShapes(geoJsonArray){
			let shapeDescendents = {};
		    let indexedShape = {};
				
			if(geoJsonArray.features && geoJsonArray.features.length > 0){
				//index all shapes by shapeId for hashed retrieval
				geoJsonArray.features.map(shape=>{					
					indexedShape[shape.id] = shape;
					indexedShape[shape.id]['properties']['magnitude'] = Math.floor((Math.random() * 1000) + 1);
				});
			}
			
			//iterate through all regions with descending layers
			libyanBorders.map(region=> {
				  region.descendents.map(descendent => {
					  indexedShape[region.regionId] = turf.erase(indexedShape[region.regionId], indexedShape[descendent]);
				  });
			});
			
			return values(indexedShape);
		}

		geojson = L.geoJson(punchHolesForDescendantShapes(borders), {
			style: style,
			onEachFeature: onEachFeature
		}).addTo(map);

		var legend = L.control({position: 'bottomright'});

		legend.onAdd = function (map) {

			var div = L.DomUtil.create('div', 'info legend'),
				grades = [0, 10, 20, 50, 100, 200, 500, 1000],
				labels = [],
				from, to;

			for (var i = 0; i < grades.length; i++) {
				from = grades[i];
				to = grades[i + 1];

				labels.push(
					'<i style="background:' + getColor(from + 1) + '"></i> ' +
					from + (to ? '&ndash;' + to : '+'));
			}

			div.innerHTML = labels.join('<br>');
			return div;
		};

		legend.addTo(map);

	</script>


</body></html>